{"version":3,"sources":["components/counter.jsx","components/counters.jsx","components/navBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["Counter","console","log","prevProps","prevState","counter","value","this","props","id","className","badgeClasses","countFormatter","onClick","onIncrement","onDelete","classes","Component","Counters","counters","onReset","map","NavBar","counterLength","href","App","state","counterId","filter","ctr","setState","index","indexOf","Fragment","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6177878.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  constructor() {\n    super();\n    console.log(\"Counter-constructor\");\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(\"prevProps\", prevProps);\n    // console.log(\"prevState\", prevState);\n    if (prevProps.counter.value !== this.props.counter.value) {\n      //perform ajax call\n      console.log(\"perform mock call for counter #\", this.props.counter.id);\n    }\n    console.log(\"Counter-mounted\");\n  }\n\n  /**\n   * end of life cycle for that component\n   */\n  componentWillUnmount() {\n    // to be used for performing any clean ups\n    console.log(\"Counter-unmounted\");\n  }\n  render() {\n    console.log(\"Counter-rendered\");\n    return (\n      <div>\n        <span className={this.badgeClasses()}>{this.countFormatter()}</span>\n        <button\n          onClick={() => this.props.onIncrement(this.props.counter)}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)}\n          className=\"btn btn-danger btn-sm\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n\n  badgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  countFormatter() {\n    const { value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  constructor() {\r\n    super();\r\n    console.log(\"Counters-constructor\");\r\n  }\r\n  componentDidUpdate() {\r\n    console.log(\"Counters-mounted\");\r\n  }\r\n  render() {\r\n    console.log(\"Counters-rendered\");\r\n    const { counters, onReset, onDelete, onIncrement } = this.props;\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n          Reset\r\n        </button>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            counter={counter}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React from \"react\";\r\n\r\n//stateless functional component instead of having classes\r\n//react adds props arg at runtime\r\n//{property} = this.object\r\n//extracts property from object\r\nconst NavBar = ({ counterLength }) => {\r\n  console.log(\"navbar-rendered\");\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          Navbar\r\n          <span className=\"badge-pill badge badge-secondary\">\r\n            {counterLength}\r\n          </span>\r\n        </a>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import \"./App.css\";\nimport Counters from \"./components/counters\";\nimport NavBar from \"./components/navBar\";\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 0, value: 0 },\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n    ],\n  };\n\n  constructor() {\n    super();\n    console.log(\"App-constructor\");\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(\"prevProps\", prevProps);\n    // console.log(\"prevState\", prevState);\n    console.log(\"App-mounted\");\n  }\n  onDelete = (counterId) => {\n    console.log(\"Delete called for counter #\", counterId);\n    const counters = this.state.counters.filter((ctr) => ctr.id !== counterId);\n    this.setState({ counters });\n  };\n\n  onReset = () => {\n    const counters = this.state.counters.map((ctr) => {\n      ctr.value = 0;\n      return ctr;\n    });\n    this.setState({ counters });\n  };\n  onIncrement = (counter) => {\n    console.log(\"on increment called\");\n    const counters = [...this.state.counters];\n    const index = this.state.counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value += 1;\n    this.setState({ counters });\n    console.log(\"on increment called\", counters);\n  };\n  render() {\n    console.log(\"App-rendered\");\n    return (\n      <React.Fragment>\n        <NavBar\n          counterLength={\n            this.state.counters.filter((ctr) => ctr.value > 0).length\n          }\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.onReset}\n            onIncrement={this.onIncrement}\n            onDelete={this.onDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}